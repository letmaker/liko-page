import{O as m,d as n,b}from"./liko.es-FNTwz-us.js";import"./index-BKZWgIt2.js";async function $(){const a=new m;await a.init({width:800,height:800,bgColor:"#333333"}),console.log("=== 示例1: 通过plist文件创建火焰效果 ===");const r=new n({url:"assets/particle/fire2.plist",parent:a.stage,position:{x:150,y:300},autoPlay:!0});r.on(b.loaded,()=>{console.log("火焰粒子配置加载完成")});const g=new n({url:"assets/particle/fire1.plist",parent:a.stage,position:{x:150,y:600},autoPlay:!0});console.log("=== 示例2: 简化的瀑布效果 ===");const o=new n({parent:a.stage,position:{x:400,y:100}});o.setGravity(0,150),o.setAngle(270,15),o.setStartColor({r:.3,g:.6,b:1,a:1}),o.setEndColor({r:.1,g:.3,b:.8,a:0}),o.setParticleSize(8,12),o.setEmissionRate(100),o.setParticleLifespan(3,.5),o.play(),console.log("=== 示例3: 爆炸效果 ===");const t=new n({parent:a.stage,position:{x:650,y:300}});t.setStartColor({r:1,g:.3,b:.1,a:1}),t.setEndColor({r:1,g:.8,b:0,a:0}),t.setParticleSize(15,5),t.setEmissionRate(300),t.play(),console.log("=== 示例4: 动态控制演示 ===");let p=0;setInterval(()=>{switch(p+=2,p%8){case 0:console.log("启动爆炸效果"),t.play();break;case 2:console.log("暂停爆炸效果"),t.pause();break;case 4:console.log("恢复爆炸效果"),t.resume();break;case 6:console.log("停止爆炸效果"),t.stop();break}},2e3),console.log("=== 示例5: 动态修改属性演示 ===");const e=new n({parent:a.stage,position:{x:650,y:600}});e.setGravity(0,-50),e.setAngle(90,30),e.setStartColor({r:1,g:1,b:1,a:1}),e.setEndColor({r:1,g:1,b:1,a:0}),e.setParticleSize(10,5),e.setEmissionRate(50),e.setParticleLifespan(2),e.play();let c=0;const u=[{r:1,g:0,b:0,a:1},{r:0,g:1,b:0,a:1},{r:0,g:0,b:1,a:1},{r:1,g:1,b:0,a:1},{r:1,g:0,b:1,a:1}];setInterval(()=>{const s=u[c%u.length];console.log(`改变粒子颜色为: R:${s.r} G:${s.g} B:${s.b}`),e.setStartColor(s),e.setEndColor({...s,a:0});const P=5+c%3*5;e.setParticleSize(P,P/2);const C=30+c%4*20;e.setEmissionRate(C),c++},3e3),console.log("=== 示例6: 性能监控 ==="),setInterval(()=>{console.log("=== 粒子系统状态 ==="),console.log(`火焰粒子数量: ${r.particleCount}, 播放中: ${r.isPlaying}`),console.log(`烟雾粒子数量: ${g.particleCount}, 播放中: ${g.isPlaying}`),console.log(`瀑布粒子数量: ${o.particleCount}, 播放中: ${o.isPlaying}`),console.log(`爆炸粒子数量: ${t.particleCount}, 播放中: ${t.isPlaying}, 暂停: ${t.isPaused}`),console.log(`动态粒子数量: ${e.particleCount}, 播放中: ${e.isPlaying}`);const s=r.particleCount+g.particleCount+o.particleCount+t.particleCount+e.particleCount;console.log(`总粒子数量: ${s}`)},5e3),console.log("=== 示例7: 事件监听演示 ===");const i=new n({parent:a.stage,position:{x:400,y:500}});i.setStartColor({r:1,g:.8,b:0,a:1}),i.setEndColor({r:1,g:.2,b:0,a:0}),i.setParticleSize(12,3),i.setEmissionRate(100),i.setParticleLifespan(1.5);function y(){i.play(),setTimeout(()=>{i.stop(),setTimeout(y,2e3)},2e3)}y(),console.log("=== 示例8: 鼠标交互粒子 ===");const l=new n({parent:a.stage,position:{x:400,y:400}});l.setStartColor({r:.8,g:.2,b:.8,a:1}),l.setEndColor({r:.2,g:.8,b:.8,a:0}),l.setParticleSize(6,2),l.setEmissionRate(30),l.setParticleLifespan(1),l.setGravity(0,20),l.play(),a.stage.on(b.pointerMove,s=>{s.pointer&&l.position.set(s.pointer.x,s.pointer.y)})}$();
